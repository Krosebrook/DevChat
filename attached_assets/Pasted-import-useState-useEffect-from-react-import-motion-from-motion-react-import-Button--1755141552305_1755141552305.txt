import { useState, useEffect } from 'react';
import { motion } from 'motion/react';
import { Button } from './components/ui/button';
import { Card, CardContent } from './components/ui/card';
import { Badge } from './components/ui/badge';
import { DemoBanner } from './components/ui/demo-banner';
import { 
  Menu, X, Plus, MoreHorizontal, Settings
} from 'lucide-react';

// Import new modular components
import { AuthProvider, AuthButton, useAuth } from './components/auth/AuthSystem';
import { CodeGenerator } from './components/generation/CodeGenerator';
import { ConfigWizard } from './components/wizard/ConfigWizard';
import { Sidebar } from './components/layout/Sidebar';
import { Breadcrumb } from './components/layout/Breadcrumb';
import { HomePage } from './components/pages/HomePage';
import { DashboardPage } from './components/pages/DashboardPage';
import { ToolsPage } from './components/pages/ToolsPage';
import { ToolDetailPage } from './components/pages/ToolDetailPage';
import { IntegrationsPage } from './components/pages/IntegrationsPage';
import { DeploymentsPage } from './components/pages/DeploymentsPage';

// Import types and services
import { PageType } from './types';
import { projectService } from './services/database';

function AppContent() {
  const [currentPage, setCurrentPage] = useState<PageType>('home');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [showWizard, setShowWizard] = useState(false);
  const [selectedTool, setSelectedTool] = useState<string>('');
  const [projects, setProjects] = useState<any[]>([]);
  const { user, isAuthenticated } = useAuth();

  // Load user projects
  useEffect(() => {
    const loadProjects = async () => {
      if (user) {
        const userProjects = await projectService.getUserProjects(user.id);
        setProjects(userProjects);
      }
    };

    loadProjects();
  }, [user]);

  // Redirect to home if not authenticated and trying to access protected pages
  useEffect(() => {
    const protectedPages: PageType[] = ['dashboard', 'projects', 'analytics', 'settings', 'integrations', 'deployments'];
    
    if (!isAuthenticated && protectedPages.includes(currentPage)) {
      setCurrentPage('home');
    }
  }, [isAuthenticated, currentPage]);

  const renderCurrentPage = () => {
    switch (currentPage) {
      case 'home':
        return (
          <HomePage 
            isAuthenticated={isAuthenticated}
            setCurrentPage={setCurrentPage}
            setShowWizard={setShowWizard}
          />
        );
      case 'dashboard':
        return isAuthenticated ? (
          <DashboardPage setCurrentPage={setCurrentPage} />
        ) : null;
      case 'generator':
        return <CodeGenerator />;
      case 'wizard':
        return <ConfigWizard onComplete={() => setCurrentPage('projects')} />;
      case 'tools':
        return (
          <ToolsPage 
            setCurrentPage={setCurrentPage}
            setSelectedTool={setSelectedTool}
            userRole={user?.role}
          />
        );
      case 'tool-detail':
        return (
          <ToolDetailPage
            toolId={selectedTool}
            setCurrentPage={setCurrentPage}
            userRole={user?.role}
          />
        );
      case 'integrations':
        return isAuthenticated ? (
          <IntegrationsPage userRole={user?.role} />
        ) : null;
      case 'deployments':
        return isAuthenticated ? (
          <DeploymentsPage userRole={user?.role} />
        ) : null;
      case 'projects':
        return isAuthenticated ? (
          <motion.div 
            className="space-y-6"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <div className="flex items-center justify-between">
              <div>
                <h1>My Projects</h1>
                <p className="text-muted-foreground">Manage and organize your AI-generated projects</p>
              </div>
              <Button className="ff-btn-primary" onClick={() => setShowWizard(true)}>
                <Plus className="h-4 w-4 mr-2" />
                New Project
              </Button>
            </div>
            
            {projects.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 ff-stagger-fade">
                {projects.map((project, index) => (
                  <motion.div
                    key={project.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className="ff-card-interactive">
                      <CardContent className="p-0">
                        <div className="aspect-video bg-muted rounded-t-lg overflow-hidden">
                          {project.image_url ? (
                            <img src={project.image_url} alt={project.name} className="w-full h-full object-cover" />
                          ) : (
                            <div className="w-full h-full bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center">
                              <span className="text-4xl font-bold text-primary/40">
                                {project.framework.charAt(0).toUpperCase()}
                              </span>
                            </div>
                          )}
                        </div>
                        <div className="p-6">
                          <div className="flex items-start justify-between mb-2">
                            <h3 className="font-semibold">{project.name}</h3>
                            <Button variant="ghost" size="sm">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </div>
                          <p className="text-sm text-muted-foreground mb-3">{project.description}</p>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <Badge variant="outline" className="text-xs">{project.framework}</Badge>
                              <p className="text-xs text-muted-foreground">
                                {new Date(project.updated_at).toLocaleDateString()}
                              </p>
                            </div>
                            <Badge variant={
                              project.status === 'active' ? 'default' : 
                              project.status === 'completed' ? 'secondary' : 
                              'outline'
                            }>
                              {project.status}
                            </Badge>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            ) : (
              <div className="text-center py-16">
                <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                  <Plus className="h-8 w-8 text-muted-foreground" />
                </div>
                <h3 className="font-semibold mb-2">No projects yet</h3>
                <p className="text-muted-foreground mb-6">Create your first AI-powered project to get started.</p>
                <Button className="ff-btn-primary" onClick={() => setShowWizard(true)}>
                  <Plus className="h-4 w-4 mr-2" />
                  Create First Project
                </Button>
              </div>
            )}
          </motion.div>
        ) : null;
      case 'analytics':
        return isAuthenticated ? (
          <motion.div 
            className="space-y-6"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <div className="flex items-center justify-between">
              <div>
                <h1>Analytics Dashboard</h1>
                <p className="text-muted-foreground">Track your project performance and usage</p>
              </div>
              <Button variant="outline">
                <Settings className="h-4 w-4 mr-2" />
                Configure
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[
                { title: 'Total Projects', value: projects.length.toString(), change: '+12%', color: 'text-blue-500' },
                { title: 'Active Projects', value: projects.filter(p => p.status === 'active').length.toString(), change: '+8%', color: 'text-green-500' },
                { title: 'Completed', value: projects.filter(p => p.status === 'completed').length.toString(), change: '+0.5%', color: 'text-purple-500' },
                { title: 'Credits Used', value: ((user?.credits || 100) - (user?.credits || 0)).toString(), change: '+15%', color: 'text-orange-500' }
              ].map((stat, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <Card className="ff-card-interactive">
                    <CardContent className="p-6">
                      <div className="space-y-2">
                        <p className="text-sm text-muted-foreground">{stat.title}</p>
                        <div className="flex items-center justify-between">
                          <p className="text-2xl font-bold">{stat.value}</p>
                          <span className={`text-sm ${stat.color}`}>{stat.change}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>

            <Card className="ff-card-interactive">
              <CardContent className="p-8 text-center">
                <div className="h-64 flex items-center justify-center text-muted-foreground">
                  <div>
                    <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                      📊
                    </div>
                    <h3 className="font-semibold mb-2">Advanced Analytics Coming Soon</h3>
                    <p>Detailed analytics dashboard with charts, insights, and performance metrics.</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ) : null;
      case 'settings':
        return isAuthenticated ? (
          <motion.div 
            className="space-y-6"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <h1>Settings</h1>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="ff-card-interactive">
                <CardContent className="p-6">
                  <h3 className="font-semibold mb-4">Account Settings</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium">Full Name</label>
                      <p className="text-muted-foreground">{user?.full_name || 'Not set'}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium">Email</label>
                      <p className="text-muted-foreground">{user?.email}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium">Plan</label>
                      <p className="text-muted-foreground capitalize">{user?.role} Plan</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="ff-card-interactive">
                <CardContent className="p-6">
                  <h3 className="font-semibold mb-4">Preferences</h3>
                  <p className="text-muted-foreground">Customization options coming soon.</p>
                </CardContent>
              </Card>
            </div>
          </motion.div>
        ) : null;
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-background flex">
      {/* Demo Mode Banner */}
      <DemoBanner />

      {/* Mobile Menu Button */}
      <Button
        variant="ghost"
        size="sm"
        className="fixed top-4 left-4 z-40 lg:hidden"
        onClick={() => setSidebarOpen(!sidebarOpen)}
      >
        {sidebarOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
      </Button>

      {/* Sidebar Overlay */}
      {sidebarOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-background/80 backdrop-blur-sm z-30 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      <Sidebar 
        currentPage={currentPage}
        setCurrentPage={setCurrentPage}
        sidebarOpen={sidebarOpen}
        setSidebarOpen={setSidebarOpen}
        isAuthenticated={isAuthenticated}
        userStats={user?.stats}
        setShowWizard={setShowWizard}
      />
      
      <div className="flex-1 overflow-auto">
        <main className="container mx-auto px-6 py-8 lg:px-8">
          <Breadcrumb currentPage={currentPage} />
          {renderCurrentPage()}
        </main>
      </div>

      {/* Project Wizard Modal */}
      {showWizard && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="fixed inset-0 bg-background/90 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="w-full max-w-4xl max-h-[90vh] overflow-auto"
          >
            <div className="flex justify-end mb-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowWizard(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            <ConfigWizard onComplete={() => {
              setShowWizard(false);
              setCurrentPage('projects');
              // Refresh projects after wizard completion
              if (user) {
                projectService.getUserProjects(user.id).then(setProjects);
              }
            }} />
          </motion.div>
        </motion.div>
      )}
    </div>
  );
}

export default function App() {
  return (
    <AuthProvider>
      <div className="min-h-screen bg-background">
        <header className="border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-40">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 lg:hidden">
                <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-orange-500 to-cyan-500 flex items-center justify-center">
                  {/* Mobile logo placeholder */}
                </div>
                <span className="font-bold ff-text-gradient">FlashFusion</span>
              </div>
              <div className="hidden lg:block" />
              <AuthButton />
            </div>
          </div>
        </header>
        <AppContent />
      </div>
    </AuthProvider>
  );
}