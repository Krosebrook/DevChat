import { useState, useEffect } from 'react';
import { motion } from 'motion/react';
import { Button } from '../ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';
import { Progress } from '../ui/progress';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';
import { 
  Calendar,
  Trophy,
  Target,
  Zap,
  Plus,
  Star,
  Crown,
  TrendingUp,
  BarChart3,
  Clock,
  CheckCircle2,
  Flame
} from 'lucide-react';
import { useAuth } from '../auth/AuthSystem';
import { userService, badgeService, dailyTaskService, projectService, analyticsService } from '../../services/database';
import { createBadges, dailyTasks as staticDailyTasks } from '../../data/constants';
import { UserStatsRow, ProjectRow, UserBadgeRow } from '../../lib/supabase';
import { PageType } from '../../types';

interface DashboardPageProps {
  setCurrentPage: (page: PageType) => void;
}

export function DashboardPage({ setCurrentPage }: DashboardPageProps) {
  const { user, refreshUser } = useAuth();
  const [userStats, setUserStats] = useState<UserStatsRow | null>(null);
  const [projects, setProjects] = useState<ProjectRow[]>([]);
  const [userBadges, setUserBadges] = useState<UserBadgeRow[]>([]);
  const [dailyTasks, setDailyTasks] = useState<any[]>([]);
  const [leaderboard, setLeaderboard] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [taskLoading, setTaskLoading] = useState<string | null>(null);

  // Load dashboard data
  useEffect(() => {
    const loadDashboardData = async () => {
      if (!user) return;

      try {
        setLoading(true);
        
        const [stats, userProjects, badges, todaysTasks, leaderboardData] = await Promise.all([
          userService.getStats(user.id),
          projectService.getUserProjects(user.id),
          badgeService.getUserBadges(user.id),
          dailyTaskService.getTodaysTasks(user.id),
          analyticsService.getLeaderboard(10)
        ]);

        setUserStats(stats);
        setProjects(userProjects);
        setUserBadges(badges.data || []);
        
        // Merge static daily tasks with user progress
        const mergedTasks = staticDailyTasks.map(task => {
          const userTask = todaysTasks.data?.find(ut => ut.task_id === task.id);
          return {
            ...task,
            completed: userTask?.completed || false
          };
        });
        setDailyTasks(mergedTasks);
        
        setLeaderboard(leaderboardData.data || []);
      } catch (error) {
        console.error('Error loading dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadDashboardData();
  }, [user]);

  const handleTaskComplete = async (taskId: string) => {
    if (!user || taskLoading) return;

    const task = dailyTasks.find(t => t.id === taskId);
    if (!task || task.completed) return;

    setTaskLoading(taskId);

    try {
      const { data, error } = await dailyTaskService.completeTask(user.id, taskId, task.xpReward);
      
      if (!error && data) {
        // Update local state
        setDailyTasks(prev => prev.map(t => 
          t.id === taskId ? { ...t, completed: true } : t
        ));
        
        // Refresh user data to get updated stats
        await refreshUser();
        const updatedStats = await userService.getStats(user.id);
        setUserStats(updatedStats);
      }
    } catch (error) {
      console.error('Error completing task:', error);
    } finally {
      setTaskLoading(null);
    }
  };

  // Calculate XP to next level
  const xpToNext = userStats ? Math.max(1000 - (userStats.xp % 1000), 0) : 1000;
  const xpProgress = userStats ? ((userStats.xp % 1000) / 1000) * 100 : 0;

  // Get earned badges
  const allBadges = createBadges(user?.role);
  const earnedBadgeIds = new Set(userBadges.filter(ub => ub.earned).map(ub => ub.badge_id));
  const earnedBadges = allBadges.filter(badge => earnedBadgeIds.has(badge.id));

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <motion.div 
      className="space-y-6"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
    >
      {/* Welcome Section */}
      <div className="flex items-center justify-between">
        <div>
          <h1>Welcome back, {user?.full_name || 'Developer'}! ðŸ‘‹</h1>
          <p className="text-muted-foreground">Ready to build something amazing today?</p>
        </div>
        <Button className="ff-btn-primary" onClick={() => setCurrentPage('tools')}>
          <Plus className="h-4 w-4 mr-2" />
          Start Building
        </Button>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          <Card className="ff-card-interactive">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Level Progress</CardTitle>
              <Trophy className="h-4 w-4 text-primary" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">Level {userStats?.level || 1}</div>
              <div className="space-y-2 mt-2">
                <Progress value={xpProgress} className="ff-progress-bar" />
                <p className="text-xs text-muted-foreground">
                  {xpToNext} XP to next level
                </p>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card className="ff-card-interactive">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Projects</CardTitle>
              <BarChart3 className="h-4 w-4 text-secondary" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-secondary">{projects.length}</div>
              <p className="text-xs text-muted-foreground">
                +{projects.filter(p => {
                  const weekAgo = new Date();
                  weekAgo.setDate(weekAgo.getDate() - 7);
                  return new Date(p.created_at) > weekAgo;
                }).length} this week
              </p>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <Card className="ff-card-interactive">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Credits</CardTitle>
              <Zap className="h-4 w-4 text-accent" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-accent">{user?.credits || 0}</div>
              <p className="text-xs text-muted-foreground">
                Available to use
              </p>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <Card className="ff-card-interactive">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Daily Streak</CardTitle>
              <Flame className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-500">{userStats?.streak || 0}</div>
              <p className="text-xs text-muted-foreground">
                Days in a row
              </p>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Daily Tasks */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Target className="h-5 w-5 text-primary" />
                Daily Flash Tasks
              </CardTitle>
              <CardDescription>Complete tasks to earn XP and maintain your streak</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {dailyTasks.map((task, index) => (
                  <motion.div
                    key={task.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className={`flex items-center justify-between p-3 rounded-lg border transition-all ${
                      task.completed
                        ? 'bg-green-500/10 border-green-500/20'
                        : 'bg-muted/30 hover:bg-muted/50'
                    }`}
                  >
                    <div className="flex items-center gap-3">
                      <div className={`p-2 rounded-lg ${
                        task.completed ? 'bg-green-500/20' : 'bg-primary/20'
                      }`}>
                        {task.completed ? (
                          <CheckCircle2 className="h-4 w-4 text-green-400" />
                        ) : (
                          <Clock className="h-4 w-4 text-primary" />
                        )}
                      </div>
                      <div>
                        <h4 className="font-medium">{task.title}</h4>
                        <p className="text-sm text-muted-foreground">{task.description}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant="secondary" className="text-xs">
                        +{task.xpReward} XP
                      </Badge>
                      {!task.completed && (
                        <Button
                          size="sm"
                          onClick={() => handleTaskComplete(task.id)}
                          disabled={taskLoading === task.id}
                          className="ff-btn-primary"
                        >
                          {taskLoading === task.id ? 'Completing...' : 'Complete'}
                        </Button>
                      )}
                    </div>
                  </motion.div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Leaderboard */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-accent" />
                Leaderboard
              </CardTitle>
              <CardDescription>Top developers this month</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {leaderboard.slice(0, 5).map((entry, index) => (
                  <motion.div
                    key={entry.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="flex items-center gap-3"
                  >
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                      index === 0 ? 'bg-yellow-500 text-black' :
                      index === 1 ? 'bg-gray-400 text-black' :
                      index === 2 ? 'bg-orange-600 text-white' :
                      'bg-muted text-muted-foreground'
                    }`}>
                      {index + 1}
                    </div>
                    <Avatar className="h-8 w-8">
                      <AvatarImage src={entry.users?.avatar_url} />
                      <AvatarFallback>
                        {entry.users?.full_name?.charAt(0) || '?'}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">
                        {entry.users?.full_name || 'Anonymous'}
                        {entry.user_id === user?.id && ' (You)'}
                      </p>
                      <p className="text-xs text-muted-foreground">Level {entry.level}</p>
                    </div>
                    <div className="text-sm font-semibold text-primary">
                      {entry.xp.toLocaleString()} XP
                    </div>
                  </motion.div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Recent Projects & Badges */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Projects */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center gap-2">
                <Calendar className="h-5 w-5 text-secondary" />
                Recent Projects
              </span>
              <Button variant="outline" size="sm" onClick={() => setCurrentPage('projects')}>
                View All
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {projects.length > 0 ? (
              <div className="space-y-3">
                {projects.slice(0, 3).map((project, index) => (
                  <motion.div
                    key={project.id}
                    initial={{ opacity: 0, x: -10 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-center gap-3 p-3 rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
                  >
                    <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center">
                      <span className="text-xs font-bold">
                        {project.framework.charAt(0)}
                      </span>
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium">{project.name}</h4>
                      <p className="text-sm text-muted-foreground">
                        {project.framework} â€¢ {new Date(project.updated_at).toLocaleDateString()}
                      </p>
                    </div>
                    <Badge variant={
                      project.status === 'active' ? 'default' :
                      project.status === 'completed' ? 'secondary' :
                      'outline'
                    }>
                      {project.status}
                    </Badge>
                  </motion.div>
                ))}
              </div>
            ) : (
              <div className="text-center py-6">
                <p className="text-muted-foreground mb-4">No projects yet</p>
                <Button size="sm" onClick={() => setCurrentPage('tools')}>
                  Create Your First Project
                </Button>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Earned Badges */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Star className="h-5 w-5 text-accent" />
              Earned Badges ({earnedBadges.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            {earnedBadges.length > 0 ? (
              <div className="grid grid-cols-3 gap-3">
                {earnedBadges.slice(0, 6).map((badge, index) => (
                  <motion.div
                    key={badge.id}
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: index * 0.1 }}
                    className="text-center p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors cursor-pointer"
                    title={badge.description}
                  >
                    <div className="text-2xl mb-1">{badge.icon}</div>
                    <p className="text-xs font-medium">{badge.name}</p>
                  </motion.div>
                ))}
              </div>
            ) : (
              <div className="text-center py-6">
                <Trophy className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                <p className="text-muted-foreground mb-4">No badges earned yet</p>
                <Button size="sm" onClick={() => setCurrentPage('tools')}>
                  Start Earning Badges
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </motion.div>
  );
}