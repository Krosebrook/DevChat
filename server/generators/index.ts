import { type Project, type GenerationTask } from '@shared/schema';
import { ReactGenerator } from './frameworks/react';
import { NextJSGenerator } from './frameworks/nextjs';
import { SvelteGenerator } from './frameworks/svelte';
import { ReactNativeGenerator } from './frameworks/react-native';
import { FlutterGenerator } from './frameworks/flutter';
import { ElectronGenerator } from './frameworks/electron';
import { TauriGenerator } from './frameworks/tauri';
import { storage } from '../storage';

export interface GeneratedFile {
  path: string;
  content: string;
  type: 'file' | 'directory';
}

export interface GenerationResult {
  files: GeneratedFile[];
  packageJson?: any;
  readme?: string;
  deploymentConfig?: any;
}

export class ProjectGenerator {
  private generators = new Map([
    ['react', new ReactGenerator()],
    ['nextjs', new NextJSGenerator()],
    ['svelte', new SvelteGenerator()],
    ['react-native', new ReactNativeGenerator()],
    ['flutter', new FlutterGenerator()],
    ['electron', new ElectronGenerator()],
    ['tauri', new TauriGenerator()],
  ]);

  async generateProject(project: Project): Promise<GenerationResult> {
    const framework = project.framework;
    const generator = this.generators.get(framework);
    
    if (!generator) {
      throw new Error(`Generator not found for framework: ${framework}`);
    }

    console.log(`Starting generation for ${project.name} using ${framework}`);
    
    const result = await generator.generate({
      name: project.name,
      description: project.description || '',
      platform: project.platform,
      framework: project.framework,
      features: project.features || [],
      configuration: project.configuration || {},
    });

    console.log(`Generation completed for ${project.name}`);
    return result;
  }

  getSupportedFrameworks(): string[] {
    return Array.from(this.generators.keys());
  }
}

export abstract class BaseGenerator {
  abstract generate(config: any): Promise<GenerationResult>;

  protected generatePackageJson(config: any): any {
    const basePackageJson = {
      name: config.name.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      description: config.description,
      private: true,
      scripts: {},
      dependencies: {},
      devDependencies: {},
    };

    return basePackageJson;
  }

  protected generateReadme(config: any): string {
    return `# ${config.name}

${config.description}

## Features

${config.features.map((feature: string) => `- ${this.getFeatureName(feature)}`).join('\n')}

## Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Start the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Open your browser and visit http://localhost:3000

## Generated by FlashFusion

This project was generated using FlashFusion Universal App Generator.
Visit https://flashfusion.dev to create your own applications.
`;
  }

  private getFeatureName(feature: string): string {
    const featureNames: Record<string, string> = {
      authentication: 'User Authentication',
      database: 'Database Integration',
      payments: 'Payment Processing',
      realtime: 'Real-time Features',
      analytics: 'Analytics & Tracking',
      api: 'REST API',
    };
    return featureNames[feature] || feature;
  }
}

export const projectGenerator = new ProjectGenerator();